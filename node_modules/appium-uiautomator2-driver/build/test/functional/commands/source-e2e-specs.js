'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _xmldom = require('xmldom');

var _xpath = require('xpath');

var _xpath2 = _interopRequireDefault(_xpath);

var _desired = require('../desired');

var _helpersSession = require('../helpers/session');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var assertSource = function assertSource(source) {
  var dom, nodes;
  return _regeneratorRuntime.async(function assertSource$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        source.should.exist;
        dom = new _xmldom.DOMParser().parseFromString(source);
        nodes = _xpath2['default'].select('//hierarchy', dom);

        nodes.length.should.equal(1);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, _this);
};

describe('apidemo - source', function () {
  var driver = undefined;
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_desired.APIDEMOS_CAPS));

        case 2:
          driver = context$2$0.sent;

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.quit());

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  it('should return the page source', function callee$1$0() {
    var source;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.source());

        case 2:
          source = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(assertSource(source));

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  it('should get less source when compression is enabled', function callee$1$0() {
    var getSourceWithoutCompression, getSourceWithCompression, sourceWithoutCompression, sourceWithCompression;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      var _this2 = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          getSourceWithoutCompression = function getSourceWithoutCompression() {
            return _regeneratorRuntime.async(function getSourceWithoutCompression$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(driver.updateSettings({ 'ignoreUnimportantViews': false }));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(driver.source());

                case 4:
                  return context$3$0.abrupt('return', context$3$0.sent);

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this2);
          };

          getSourceWithCompression = function getSourceWithCompression() {
            return _regeneratorRuntime.async(function getSourceWithCompression$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(driver.updateSettings({ "ignoreUnimportantViews": true }));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(driver.source());

                case 4:
                  return context$3$0.abrupt('return', context$3$0.sent);

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this2);
          };

          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(getSourceWithoutCompression());

        case 4:
          sourceWithoutCompression = context$2$0.sent;
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(getSourceWithCompression());

        case 7:
          sourceWithCompression = context$2$0.sent;

          sourceWithoutCompression.length.should.be.greaterThan(sourceWithCompression.length);
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(getSourceWithoutCompression().should.eventually.eql(sourceWithoutCompression));

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy9zb3VyY2UtZTJlLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O29CQUFpQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztzQkFDbkIsUUFBUTs7cUJBQ2hCLE9BQU87Ozs7dUJBQ0ssWUFBWTs7OEJBQ2Ysb0JBQW9COztBQUcvQyxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLElBQUksWUFBWSxHQUFHLFNBQWYsWUFBWSxDQUFVLE1BQU07TUFFMUIsR0FBRyxFQUNILEtBQUs7Ozs7QUFGVCxjQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUNoQixXQUFHLEdBQUcsdUJBQWUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDO0FBQzdDLGFBQUssR0FBRyxtQkFBTSxNQUFNLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQzs7QUFDNUMsYUFBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O0NBQzlCLENBQUM7O0FBRUYsUUFBUSxDQUFDLGtCQUFrQixFQUFFLFlBQVk7QUFDdkMsTUFBSSxNQUFNLFlBQUEsQ0FBQztBQUNYLFFBQU0sQ0FBQzs7Ozs7MkNBQ1UsdURBQXlCOzs7QUFBeEMsZ0JBQU07Ozs7Ozs7R0FDUCxDQUFDLENBQUM7QUFDSCxPQUFLLENBQUM7Ozs7OzJDQUNFLE1BQU0sQ0FBQyxJQUFJLEVBQUU7Ozs7Ozs7R0FDcEIsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLCtCQUErQixFQUFFO1FBQzlCLE1BQU07Ozs7OzJDQUFTLE1BQU0sQ0FBQyxNQUFNLEVBQUU7OztBQUE5QixnQkFBTTs7MkNBQ0osWUFBWSxDQUFDLE1BQU0sQ0FBQzs7Ozs7OztHQUMzQixDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsb0RBQW9ELEVBQUU7UUFDbkQsMkJBQTJCLEVBSTNCLHdCQUF3QixFQUl4Qix3QkFBd0IsRUFDeEIscUJBQXFCOzs7Ozs7QUFUckIscUNBQTJCLEdBQUcsU0FBOUIsMkJBQTJCOzs7OzttREFDdkIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFDLHdCQUF3QixFQUFFLEtBQUssRUFBQyxDQUFDOzs7O21EQUNqRCxNQUFNLENBQUMsTUFBTSxFQUFFOzs7Ozs7Ozs7O1dBQzdCOztBQUNHLGtDQUF3QixHQUFHLFNBQTNCLHdCQUF3Qjs7Ozs7bURBQ3BCLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBQyx3QkFBd0IsRUFBRSxJQUFJLEVBQUMsQ0FBQzs7OzttREFDaEQsTUFBTSxDQUFDLE1BQU0sRUFBRTs7Ozs7Ozs7OztXQUM3Qjs7OzJDQUNvQywyQkFBMkIsRUFBRTs7O0FBQTlELGtDQUF3Qjs7MkNBQ00sd0JBQXdCLEVBQUU7OztBQUF4RCwrQkFBcUI7O0FBQ3pCLGtDQUF3QixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7MkNBQzlFLDJCQUEyQixFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUM7Ozs7Ozs7R0FDcEYsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy9zb3VyY2UtZTJlLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgeyBET01QYXJzZXIgfSBmcm9tICd4bWxkb20nO1xuaW1wb3J0IHhwYXRoIGZyb20gJ3hwYXRoJztcbmltcG9ydCB7IEFQSURFTU9TX0NBUFMgfSBmcm9tICcuLi9kZXNpcmVkJztcbmltcG9ydCB7IGluaXREcml2ZXIgfSBmcm9tICcuLi9oZWxwZXJzL3Nlc3Npb24nO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmxldCBhc3NlcnRTb3VyY2UgPSBhc3luYyAoc291cmNlKSA9PiB7XG4gIHNvdXJjZS5zaG91bGQuZXhpc3Q7XG4gIGxldCBkb20gPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHNvdXJjZSk7XG4gIGxldCBub2RlcyA9IHhwYXRoLnNlbGVjdCgnLy9oaWVyYXJjaHknLCBkb20pO1xuICBub2Rlcy5sZW5ndGguc2hvdWxkLmVxdWFsKDEpO1xufTtcblxuZGVzY3JpYmUoJ2FwaWRlbW8gLSBzb3VyY2UnLCBmdW5jdGlvbiAoKSB7XG4gIGxldCBkcml2ZXI7XG4gIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgZHJpdmVyID0gYXdhaXQgaW5pdERyaXZlcihBUElERU1PU19DQVBTKTtcbiAgfSk7XG4gIGFmdGVyKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBhd2FpdCBkcml2ZXIucXVpdCgpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCByZXR1cm4gdGhlIHBhZ2Ugc291cmNlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGxldCBzb3VyY2UgPSBhd2FpdCBkcml2ZXIuc291cmNlKCk7XG4gICAgYXdhaXQgYXNzZXJ0U291cmNlKHNvdXJjZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGdldCBsZXNzIHNvdXJjZSB3aGVuIGNvbXByZXNzaW9uIGlzIGVuYWJsZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGdldFNvdXJjZVdpdGhvdXRDb21wcmVzc2lvbiA9IGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IGRyaXZlci51cGRhdGVTZXR0aW5ncyh7J2lnbm9yZVVuaW1wb3J0YW50Vmlld3MnOiBmYWxzZX0pO1xuICAgICAgcmV0dXJuIGF3YWl0IGRyaXZlci5zb3VyY2UoKTtcbiAgICB9O1xuICAgIGxldCBnZXRTb3VyY2VXaXRoQ29tcHJlc3Npb24gPSBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBkcml2ZXIudXBkYXRlU2V0dGluZ3Moe1wiaWdub3JlVW5pbXBvcnRhbnRWaWV3c1wiOiB0cnVlfSk7XG4gICAgICByZXR1cm4gYXdhaXQgZHJpdmVyLnNvdXJjZSgpO1xuICAgIH07XG4gICAgbGV0IHNvdXJjZVdpdGhvdXRDb21wcmVzc2lvbiA9IGF3YWl0IGdldFNvdXJjZVdpdGhvdXRDb21wcmVzc2lvbigpO1xuICAgIGxldCBzb3VyY2VXaXRoQ29tcHJlc3Npb24gPSBhd2FpdCBnZXRTb3VyY2VXaXRoQ29tcHJlc3Npb24oKTtcbiAgICBzb3VyY2VXaXRob3V0Q29tcHJlc3Npb24ubGVuZ3RoLnNob3VsZC5iZS5ncmVhdGVyVGhhbihzb3VyY2VXaXRoQ29tcHJlc3Npb24ubGVuZ3RoKTtcbiAgICBhd2FpdCBnZXRTb3VyY2VXaXRob3V0Q29tcHJlc3Npb24oKS5zaG91bGQuZXZlbnR1YWxseS5lcWwoc291cmNlV2l0aG91dENvbXByZXNzaW9uKTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4ifQ==
