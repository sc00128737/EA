require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this5 = this;

var _2 = require('../..');

var _fakeDriver = require('./fake-driver');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _httpStatusCodes = require('http-status-codes');

var _httpStatusCodes2 = _interopRequireDefault(_httpStatusCodes);

var _helpers = require('./helpers');

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('MJSONWP', function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:

        //TODO: more tests!:
        // Unknown commands should return 404

        describe('direct to driver', function () {
          var d = new _fakeDriver.FakeDriver();
          it('should return response values directly from the driver', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(d.setUrl("http://google.com"));

                case 2:
                  context$3$0.sent.should.contain("google");

                case 3:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });
        });

        describe('via express router', function () {
          var mjsonwpServer = undefined;
          var driver = undefined;

          before(function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver = new _fakeDriver.FakeDriver();
                  driver.sessionId = 'foo';
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap((0, _2.server)((0, _2.routeConfiguringFunction)(driver), 8181));

                case 4:
                  mjsonwpServer = context$3$0.sent;

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          after(function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  mjsonwpServer.close();

                case 1:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should proxy to driver and return valid jsonwp response', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/url',
                    method: 'POST',
                    json: { url: 'http://google.com' }
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.should.eql({
                    status: 0,
                    value: "Navigated to: http://google.com",
                    sessionId: "foo"
                  });

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should assume requests without a Content-Type are json requests', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/url',
                    method: 'POST',
                    body: JSON.stringify({ url: 'http://google.com' })
                  }));

                case 2:
                  res = context$3$0.sent;

                  JSON.parse(res).should.eql({
                    status: 0,
                    value: "Navigated to: http://google.com",
                    sessionId: "foo"
                  });

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should respond to x-www-form-urlencoded as well as json requests', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/url',
                    method: 'POST',
                    form: { url: 'http://google.com' }
                  }));

                case 2:
                  res = context$3$0.sent;

                  JSON.parse(res).should.eql({
                    status: 0,
                    value: "Navigated to: http://google.com",
                    sessionId: "foo"
                  });

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should include url request parameters for methods to use - sessionid', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/back',
                    method: 'POST',
                    json: {},
                    simple: false,
                    resolveWithFullResponse: true
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.body.should.eql({
                    status: 0,
                    value: "foo",
                    sessionId: "foo"
                  });

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should include url request parameters for methods to use - elementid', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/element/bar/click',
                    method: 'POST',
                    json: {}
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.status.should.equal(0);
                  res.value.should.eql(["bar", "foo"]);

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should include url req params in the order: custom, element, session', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/element/bar/attribute/baz',
                    method: 'GET',
                    json: {}
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.status.should.equal(0);
                  res.value.should.eql(["baz", "bar", "foo"]);

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should respond with 400 Bad Request if parameters missing', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/url',
                    method: 'POST',
                    json: {},
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(400);
                  res.body.should.contain("url");

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should reject requests with a badly formatted body and not crash', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/url',
                    method: 'POST',
                    json: "oh hello"
                  }).should.eventually.be.rejected);

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/url',
                    method: 'POST',
                    json: { url: 'http://google.com' }
                  }));

                case 4:
                  res = context$3$0.sent;

                  res.should.eql({
                    status: 0,
                    value: "Navigated to: http://google.com",
                    sessionId: "foo"
                  });

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should get 404 for bad routes', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/blargimarg',
                    method: 'GET'
                  }).should.eventually.be.rejectedWith("404"));

                case 2:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          // TODO pass this test
          // https://github.com/appium/node-mobile-json-wire-protocol/issues/3
          it('4xx responses should have content-type of text/plain', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/blargimargarita',
                    method: 'GET',
                    resolveWithFullResponse: true,
                    simple: false // 404 errors fulfill the promise, rather than rejecting
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.headers['content-type'].should.include('text/plain');

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should throw not yet implemented for unfilledout commands', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/element/bar/location',
                    method: 'GET',
                    json: true,
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(501);
                  res.body.should.eql({
                    status: 13,
                    value: {
                      message: 'Method has not yet been implemented'
                    },
                    sessionId: 'foo'
                  });

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should throw not implemented for ignored commands', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/buttonup',
                    method: 'POST',
                    json: {},
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(501);
                  res.body.should.eql({
                    status: 13,
                    value: {
                      message: 'Method is not implemented'
                    },
                    sessionId: 'foo'
                  });

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should get 400 for bad parameters', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/url',
                    method: 'POST',
                    json: {}
                  }).should.eventually.be.rejectedWith("400"));

                case 2:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should ignore special extra payload params in the right contexts', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/element/bar/value',
                    method: 'POST',
                    json: { id: 'baz', sessionId: 'lol', value: ['a'] }
                  }));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/element/bar/value',
                    method: 'POST',
                    json: { id: 'baz' }
                  }).should.eventually.be.rejectedWith("400"));

                case 4:
                  context$3$0.next = 6;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/frame',
                    method: 'POST',
                    json: { id: 'baz' }
                  }));

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should return the correct error even if driver does not throw', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/appium/receive_async_response',
                    method: 'POST',
                    json: { response: 'baz' },
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(500);
                  res.body.should.eql({
                    status: 13,
                    value: {
                      message: 'An unknown server-side error occurred while processing ' + 'the command. Original error: Mishandled Driver Error'
                    },
                    sessionId: "foo"
                  });

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          describe('w3c sendkeys migration', function () {
            it('should accept value for sendkeys', function callee$3$0() {
              var res;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: 'http://localhost:8181/wd/hub/session/foo/element/bar/value',
                      method: 'POST',
                      json: { value: "text to type" }
                    }));

                  case 2:
                    res = context$4$0.sent;

                    res.status.should.equal(0);
                    res.value.should.eql(["text to type", "bar"]);

                  case 5:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this);
            });
            it('should accept text for sendkeys', function callee$3$0() {
              var res;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: 'http://localhost:8181/wd/hub/session/foo/element/bar/value',
                      method: 'POST',
                      json: { text: "text to type" }
                    }));

                  case 2:
                    res = context$4$0.sent;

                    res.status.should.equal(0);
                    res.value.should.eql(["text to type", "bar"]);

                  case 5:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this);
            });
            it('should accept value and text for sendkeys, and use value', function callee$3$0() {
              var res;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: 'http://localhost:8181/wd/hub/session/foo/element/bar/value',
                      method: 'POST',
                      json: { value: "text to type", text: "text to ignore" }
                    }));

                  case 2:
                    res = context$4$0.sent;

                    res.status.should.equal(0);
                    res.value.should.eql(["text to type", "bar"]);

                  case 5:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this);
            });
          });

          describe('multiple sets of arguments', function () {
            describe('optional', function () {
              it('should allow moveto with element', function callee$4$0() {
                var res;
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                        url: 'http://localhost:8181/wd/hub/session/foo/moveto',
                        method: 'POST',
                        json: { element: '3' }
                      }));

                    case 2:
                      res = context$5$0.sent;

                      res.status.should.equal(0);
                      res.value.should.eql(['3', null, null]);

                    case 5:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, _this);
              });
              it('should allow moveto with xoffset/yoffset', function callee$4$0() {
                var res;
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                        url: 'http://localhost:8181/wd/hub/session/foo/moveto',
                        method: 'POST',
                        json: { xoffset: 42, yoffset: 17 }
                      }));

                    case 2:
                      res = context$5$0.sent;

                      res.status.should.equal(0);
                      res.value.should.eql([null, 42, 17]);

                    case 5:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, _this);
              });
            });
            describe('required', function () {
              it('should allow removeApp with appId', function callee$4$0() {
                var res;
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                        url: 'http://localhost:8181/wd/hub/session/foo/appium/device/remove_app',
                        method: 'POST',
                        json: { appId: 42 }
                      }));

                    case 2:
                      res = context$5$0.sent;

                      res.status.should.equal(0);
                      res.value.should.eql(42);

                    case 5:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, _this);
              });
              it('should allow removeApp with bundleId', function callee$4$0() {
                var res;
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                        url: 'http://localhost:8181/wd/hub/session/foo/appium/device/remove_app',
                        method: 'POST',
                        json: { bundleId: 42 }
                      }));

                    case 2:
                      res = context$5$0.sent;

                      res.status.should.equal(0);
                      res.value.should.eql(42);

                    case 5:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, _this);
              });
            });
          });

          describe('default param wrap', function () {

            it('should wrap', function callee$3$0() {
              var res;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: 'http://localhost:8181/wd/hub/session/foo/touch/perform',
                      method: 'POST',
                      json: [{ "action": "tap", "options": { "element": "3" } }]
                    }));

                  case 2:
                    res = context$4$0.sent;

                    res.value.should.deep.equal([[{ "action": "tap", "options": { "element": "3" } }], 'foo']);

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this);
            });

            it('should not wrap twice', function callee$3$0() {
              var res;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: 'http://localhost:8181/wd/hub/session/foo/touch/perform',
                      method: 'POST',
                      json: { actions: [{ "action": "tap", "options": { "element": "3" } }] }
                    }));

                  case 2:
                    res = context$4$0.sent;

                    res.value.should.deep.equal([[{ "action": "tap", "options": { "element": "3" } }], 'foo']);

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this);
            });
          });

          describe('create sessions via HTTP endpoint', function () {
            var desiredCapabilities = { a: 'b' };
            var requiredCapabilities = { c: 'd' };
            var capabilities = { e: 'f' };
            var baseUrl = 'http://localhost:8181/wd/hub/session';

            it('should allow create session with desired caps (MJSONWP)', function callee$3$0() {
              var res;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: baseUrl,
                      method: 'POST',
                      json: { desiredCapabilities: desiredCapabilities }
                    }));

                  case 2:
                    res = context$4$0.sent;

                    res.status.should.equal(0);
                    res.value.should.eql(desiredCapabilities);

                  case 5:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this);
            });
            it('should allow create session with desired and required caps', function callee$3$0() {
              var res;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: baseUrl,
                      method: 'POST',
                      json: {
                        desiredCapabilities: desiredCapabilities,
                        requiredCapabilities: requiredCapabilities
                      }
                    }));

                  case 2:
                    res = context$4$0.sent;

                    res.status.should.equal(0);
                    res.value.should.eql(_lodash2['default'].extend({}, desiredCapabilities, requiredCapabilities));

                  case 5:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this);
            });
            it('should fail to create session without capabilities or desiredCapabilities', function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: baseUrl,
                      method: 'POST',
                      json: {}
                    }).should.eventually.be.rejectedWith('400'));

                  case 2:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this);
            });
            it('should allow create session with capabilities (W3C)', function callee$3$0() {
              var _ref, status, value, sessionId;

              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: baseUrl,
                      method: 'POST',
                      json: {
                        capabilities: capabilities
                      }
                    }));

                  case 2:
                    _ref = context$4$0.sent;
                    status = _ref.status;
                    value = _ref.value;
                    sessionId = _ref.sessionId;

                    should.not.exist(status);
                    should.not.exist(sessionId);
                    value.capabilities.should.eql(capabilities);
                    value.sessionId.should.exist;

                  case 10:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this);
            });

            describe('w3c endpoints', function callee$3$0() {
              var w3cCaps, sessionUrl, sessionId;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                var _this2 = this;

                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    w3cCaps = {
                      alwaysMatch: {
                        platformName: 'Fake',
                        deviceName: 'Commodore 64'
                      },
                      firstMatch: [{}]
                    };
                    sessionUrl = undefined;
                    sessionId = undefined;

                    beforeEach(function callee$4$0() {
                      var _ref2,
                      // Start a session
                      value;

                      return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                        while (1) switch (context$5$0.prev = context$5$0.next) {
                          case 0:
                            context$5$0.next = 2;
                            return _regeneratorRuntime.awrap(_requestPromise2['default'].post(baseUrl, {
                              json: {
                                capabilities: w3cCaps
                              }
                            }));

                          case 2:
                            _ref2 = context$5$0.sent;
                            value = _ref2.value;

                            sessionId = value.sessionId;
                            sessionUrl = baseUrl + '/' + sessionId;

                          case 6:
                          case 'end':
                            return context$5$0.stop();
                        }
                      }, null, this);
                    });

                    afterEach(function callee$4$0() {
                      return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                        while (1) switch (context$5$0.prev = context$5$0.next) {
                          case 0:
                            context$5$0.next = 2;
                            return _regeneratorRuntime.awrap(_requestPromise2['default']['delete'](sessionUrl));

                          case 2:
                          case 'end':
                            return context$5$0.stop();
                        }
                      }, null, this);
                    });

                    it('should throw 400 Bad Parameters exception if the parameters are bad', function callee$4$0() {
                      var _ref3, message, statusCode;

                      return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                        while (1) switch (context$5$0.prev = context$5$0.next) {
                          case 0:
                            context$5$0.next = 2;
                            return _regeneratorRuntime.awrap(_requestPromise2['default'].post(sessionUrl + '/actions', {
                              json: {
                                bad: 'params'
                              }
                            }).should.eventually.be.rejected);

                          case 2:
                            _ref3 = context$5$0.sent;
                            message = _ref3.message;
                            statusCode = _ref3.statusCode;

                            message.should.match(/Parameters were incorrect/);
                            statusCode.should.equal(400);

                          case 7:
                          case 'end':
                            return context$5$0.stop();
                        }
                      }, null, _this2);
                    });

                    it('should throw 404 Not Found exception if the command hasn\'t been implemented yet', function callee$4$0() {
                      var _ref4, message, statusCode;

                      return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                        while (1) switch (context$5$0.prev = context$5$0.next) {
                          case 0:
                            context$5$0.next = 2;
                            return _regeneratorRuntime.awrap(_requestPromise2['default'].post(sessionUrl + '/actions', {
                              json: {
                                actions: []
                              }
                            }).should.eventually.be.rejected);

                          case 2:
                            _ref4 = context$5$0.sent;
                            message = _ref4.message;
                            statusCode = _ref4.statusCode;

                            message.should.match(/Method has not yet been implemented/);
                            statusCode.should.equal(404);

                          case 7:
                          case 'end':
                            return context$5$0.stop();
                        }
                      }, null, _this2);
                    });

                    it('should throw 500 Unknown Error if the command throws an unexpected exception', function callee$4$0() {
                      var _ref5, message, statusCode;

                      return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                        while (1) switch (context$5$0.prev = context$5$0.next) {
                          case 0:
                            driver.performActions = function () {
                              throw new Error('Didn\'t work');
                            };
                            context$5$0.next = 3;
                            return _regeneratorRuntime.awrap(_requestPromise2['default'].post(sessionUrl + '/actions', {
                              json: {
                                actions: []
                              }
                            }).should.eventually.be.rejected);

                          case 3:
                            _ref5 = context$5$0.sent;
                            message = _ref5.message;
                            statusCode = _ref5.statusCode;

                            message.should.match(/500[\w\W]*Didn't work/);
                            statusCode.should.equal(500);
                            delete driver.performActions;

                          case 9:
                          case 'end':
                            return context$5$0.stop();
                        }
                      }, null, _this2);
                    });

                    it('should fail with a 408 error if it throws a TimeoutError exception', function callee$4$0() {
                      var _ref6, statusCode;

                      return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                        while (1) switch (context$5$0.prev = context$5$0.next) {
                          case 0:
                            _sinon2['default'].stub(driver, 'setUrl', function () {
                              throw new _2.errors.TimeoutError();
                            });
                            context$5$0.next = 3;
                            return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                              url: sessionUrl + '/url',
                              method: 'POST',
                              json: {
                                url: 'https://example.com/'
                              }
                            }).should.eventually.be.rejected);

                          case 3:
                            _ref6 = context$5$0.sent;
                            statusCode = _ref6.statusCode;

                            statusCode.should.equal(408);
                            _sinon2['default'].restore(driver, 'setUrl');

                          case 7:
                          case 'end':
                            return context$5$0.stop();
                        }
                      }, null, _this2);
                    });

                    it('should pass with 200 HTTP status code if the command returns a value', function callee$4$0() {
                      var _ref7, status, value, sessionId;

                      return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                        while (1) switch (context$5$0.prev = context$5$0.next) {
                          case 0:
                            driver.performActions = function (actions) {
                              return 'It works ' + actions.join('');
                            };
                            context$5$0.next = 3;
                            return _regeneratorRuntime.awrap(_requestPromise2['default'].post(sessionUrl + '/actions', {
                              json: {
                                actions: ['a', 'b', 'c']
                              }
                            }));

                          case 3:
                            _ref7 = context$5$0.sent;
                            status = _ref7.status;
                            value = _ref7.value;
                            sessionId = _ref7.sessionId;

                            should.not.exist(sessionId);
                            should.not.exist(status);
                            value.should.equal('It works abc');
                            delete driver.performActions;

                          case 11:
                          case 'end':
                            return context$5$0.stop();
                        }
                      }, null, _this2);
                    });

                    describe('jwproxy', function () {
                      var _this4 = this;

                      var port = 56562;
                      var server = undefined,
                          jwproxy = undefined,
                          app = undefined;
                      beforeEach(function () {
                        var _this3 = this;

                        var res = (0, _helpers.createProxyServer)(sessionId, port);
                        server = res.server;
                        app = res.app;
                        jwproxy = new _2.JWProxy({ host: 'localhost', port: port });
                        jwproxy.sessionId = sessionId;
                        driver.performActions = function callee$6$0(actions) {
                          return _regeneratorRuntime.async(function callee$6$0$(context$7$0) {
                            while (1) switch (context$7$0.prev = context$7$0.next) {
                              case 0:
                                context$7$0.next = 2;
                                return _regeneratorRuntime.awrap(jwproxy.command('/perform-actions', 'POST', actions));

                              case 2:
                                return context$7$0.abrupt('return', context$7$0.sent);

                              case 3:
                              case 'end':
                                return context$7$0.stop();
                            }
                          }, null, _this3);
                        };
                      });

                      afterEach(function () {
                        server.close();
                        delete driver.performActions;
                      });

                      it('should work if a proxied request returns a response with status 200', function callee$5$0() {
                        var _ref8, status, value, sessionId;

                        return _regeneratorRuntime.async(function callee$5$0$(context$6$0) {
                          while (1) switch (context$6$0.prev = context$6$0.next) {
                            case 0:
                              (0, _helpers.addHandler)(app, 'post', '/wd/hub/session/:sessionId/perform-actions', function (req, res) {
                                res.json({
                                  sessionId: req.params.sessionId,
                                  value: req.body,
                                  status: 0
                                });
                              });

                              context$6$0.next = 3;
                              return _regeneratorRuntime.awrap(_requestPromise2['default'].post(sessionUrl + '/actions', {
                                json: {
                                  actions: [1, 2, 3]
                                }
                              }));

                            case 3:
                              _ref8 = context$6$0.sent;
                              status = _ref8.status;
                              value = _ref8.value;
                              sessionId = _ref8.sessionId;

                              value.should.eql([1, 2, 3]);
                              should.not.exist(status);
                              should.not.exist(sessionId);

                            case 10:
                            case 'end':
                              return context$6$0.stop();
                          }
                        }, null, _this4);
                      });

                      it('should work if a proxied request returns a MJSONWP error response', function callee$5$0() {
                        var _ref9, statusCode, message;

                        return _regeneratorRuntime.async(function callee$5$0$(context$6$0) {
                          while (1) switch (context$6$0.prev = context$6$0.next) {
                            case 0:
                              (0, _helpers.addHandler)(app, 'post', '/wd/hub/session/:sessionId/perform-actions', function (req, res) {
                                res.status(500).json({
                                  sessionId: sessionId,
                                  status: 6,
                                  value: 'A problem occurred'
                                });
                              });
                              context$6$0.next = 3;
                              return _regeneratorRuntime.awrap(_requestPromise2['default'].post(sessionUrl + '/actions', {
                                json: {
                                  actions: [1, 2, 3]
                                }
                              }).should.eventually.be.rejected);

                            case 3:
                              _ref9 = context$6$0.sent;
                              statusCode = _ref9.statusCode;
                              message = _ref9.message;

                              statusCode.should.equal(_httpStatusCodes2['default'].NOT_FOUND);
                              message.should.match(/A problem occurred/);

                            case 8:
                            case 'end':
                              return context$6$0.stop();
                          }
                        }, null, _this4);
                      });
                    });

                  case 11:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
          });

          it('should handle commands with no response values', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/forward',
                    method: 'POST',
                    json: true
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.should.eql({
                    status: 0,
                    value: null,
                    sessionId: "foo"
                  });

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should allow empty string response values', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/element/bar/text',
                    method: 'GET',
                    json: true
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.should.eql({
                    status: 0,
                    value: "",
                    sessionId: "foo"
                  });

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should send 500 response and an Unknown object for rejected commands', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/refresh',
                    method: 'POST',
                    json: true,
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(500);
                  res.body.should.eql({
                    status: 13,
                    value: {
                      message: 'An unknown server-side error occurred while processing ' + 'the command. Original error: Too Fresh!'
                    },
                    sessionId: "foo"
                  });

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should not throw UnknownError when known', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo',
                    method: 'GET',
                    json: true,
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(404);
                  res.body.should.eql({
                    status: 6,
                    value: {
                      message: 'A session is either terminated or not started'
                    },
                    sessionId: "foo"
                  });

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });
        });

        describe('session Ids', function () {
          var driver = new _fakeDriver.FakeDriver();
          var mjsonwpServer = undefined;

          before(function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _2.server)((0, _2.routeConfiguringFunction)(driver), 8181));

                case 2:
                  mjsonwpServer = context$3$0.sent;

                case 3:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          after(function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  mjsonwpServer.close();

                case 1:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          afterEach(function () {
            driver.sessionId = null;
          });

          it('returns null SessionId for commands without sessionIds', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/status',
                    method: 'GET',
                    json: true
                  }));

                case 2:
                  res = context$3$0.sent;

                  should.equal(res.sessionId, null);

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('responds with the same session ID in the request', function callee$2$0() {
            var sessionId, res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  sessionId = 'Vader Sessions';

                  driver.sessionId = sessionId;

                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                    method: 'POST',
                    json: { url: 'http://google.com' }
                  }));

                case 4:
                  res = context$3$0.sent;

                  should.exist(res.sessionId);
                  res.sessionId.should.eql(sessionId);

                case 7:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('yells if no session exists', function callee$2$0() {
            var sessionId, res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  sessionId = 'Vader Sessions';
                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                    method: 'POST',
                    json: { url: 'http://google.com' },
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 3:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(404);
                  res.body.status.should.equal(6);
                  res.body.value.message.should.contain('session');

                case 7:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('yells if invalid session is sent', function callee$2$0() {
            var sessionId, res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  sessionId = 'Vader Sessions';

                  driver.sessionId = 'recession';

                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                    method: 'POST',
                    json: { url: 'http://google.com' },
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 4:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(404);
                  res.body.status.should.equal(6);
                  res.body.value.message.should.contain('session');

                case 8:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should have session IDs in error responses', function callee$2$0() {
            var sessionId, res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  sessionId = 'Vader Sessions';

                  driver.sessionId = sessionId;

                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/refresh',
                    method: 'POST',
                    json: true,
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 4:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(500);
                  res.body.should.eql({
                    status: 13,
                    value: {
                      message: 'An unknown server-side error occurred while processing ' + 'the command. Original error: Too Fresh!'
                    },
                    sessionId: sessionId
                  });

                case 7:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should return a new session ID on create', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session',
                    method: 'POST',
                    json: { desiredCapabilities: { greeting: 'hello' }, requiredCapabilities: { valediction: 'bye' } }
                  }));

                case 2:
                  res = context$3$0.sent;

                  should.exist(res.sessionId);
                  res.sessionId.should.equal('1234');
                  res.value.should.eql({ greeting: 'hello', valediction: 'bye' });

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });
        });

        describe('via drivers jsonwp proxy', function () {
          var driver = undefined;
          var sessionId = 'foo';
          var mjsonwpServer = undefined;

          beforeEach(function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver = new _fakeDriver.FakeDriver();
                  driver.sessionId = sessionId;
                  driver.proxyActive = function () {
                    return true;
                  };
                  driver.canProxy = function () {
                    return true;
                  };

                  context$3$0.next = 6;
                  return _regeneratorRuntime.awrap((0, _2.server)((0, _2.routeConfiguringFunction)(driver), 8181));

                case 6:
                  mjsonwpServer = context$3$0.sent;

                case 7:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          afterEach(function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  mjsonwpServer.close();

                case 1:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should give a nice error if proxying is set but no proxy function exists', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver.canProxy = function () {
                    return false;
                  };
                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                    method: 'POST',
                    json: { url: 'http://google.com' },
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 3:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(500);
                  res.body.should.eql({
                    status: 13,
                    value: {
                      message: 'An unknown server-side error occurred while processing ' + 'the command. Original error: Trying to proxy to a JSONWP ' + 'server but driver is unable to proxy'
                    },
                    sessionId: sessionId
                  });

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should pass on any errors in proxying', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver.proxyReqRes = function callee$3$0() {
                    return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                      while (1) switch (context$4$0.prev = context$4$0.next) {
                        case 0:
                          throw new Error("foo");

                        case 1:
                        case 'end':
                          return context$4$0.stop();
                      }
                    }, null, this);
                  };
                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                    method: 'POST',
                    json: { url: 'http://google.com' },
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 3:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(500);
                  res.body.should.eql({
                    status: 13,
                    value: {
                      message: 'An unknown server-side error occurred while processing ' + 'the command. Original error: Could not proxy. Proxy ' + 'error: foo'
                    },
                    sessionId: sessionId
                  });

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should able to throw ProxyRequestError in proxying', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver.proxyReqRes = function callee$3$0() {
                    var jsonwp;
                    return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                      while (1) switch (context$4$0.prev = context$4$0.next) {
                        case 0:
                          jsonwp = { status: 35, value: "No such context found.", sessionId: "foo" };
                          throw new _2.errors.ProxyRequestError('Could not proxy command to remote server. ', jsonwp);

                        case 2:
                        case 'end':
                          return context$4$0.stop();
                      }
                    }, null, this);
                  };
                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                    method: 'POST',
                    json: { url: 'http://google.com' },
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 3:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(500);
                  res.body.should.eql({
                    status: 35,
                    "value": { "message": "No such context found." },
                    sessionId: "foo"
                  });

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should let the proxy handle req/res', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver.proxyReqRes = function callee$3$0(req, res) {
                    return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                      while (1) switch (context$4$0.prev = context$4$0.next) {
                        case 0:
                          res.status(200).json({ custom: 'data' });

                        case 1:
                        case 'end':
                          return context$4$0.stop();
                      }
                    }, null, this);
                  };
                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                    method: 'POST',
                    json: { url: 'http://google.com' },
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 3:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(200);
                  res.body.should.eql({ custom: 'data' });

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should avoid jsonwp proxying when path matches avoidance list', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver.getProxyAvoidList = function () {
                    return [['POST', new RegExp('^/session/[^/]+/url$')]];
                  };
                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                    method: 'POST',
                    json: { url: 'http://google.com' },
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 3:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(200);
                  res.body.should.eql({
                    status: 0,
                    value: "Navigated to: http://google.com",
                    sessionId: sessionId
                  });

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should fail if avoid proxy list is malformed in some way', function callee$2$0() {
            var badProxyAvoidanceList, lists, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, list;

            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  badProxyAvoidanceList = function badProxyAvoidanceList(list) {
                    var res;
                    return _regeneratorRuntime.async(function badProxyAvoidanceList$(context$4$0) {
                      while (1) switch (context$4$0.prev = context$4$0.next) {
                        case 0:
                          driver.getProxyAvoidList = function () {
                            return list;
                          };
                          context$4$0.next = 3;
                          return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                            url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                            method: 'POST',
                            json: { url: 'http://google.com' },
                            resolveWithFullResponse: true,
                            simple: false
                          }));

                        case 3:
                          res = context$4$0.sent;

                          res.statusCode.should.equal(500);
                          res.body.status.should.equal(13);
                          res.body.value.message.should.contain("roxy");

                        case 7:
                        case 'end':
                          return context$4$0.stop();
                      }
                    }, null, this);
                  };

                  lists = ['foo', [['foo']], [['BAR', /lol/]], [['GET', 'foo']]];
                  _iteratorNormalCompletion = true;
                  _didIteratorError = false;
                  _iteratorError = undefined;
                  context$3$0.prev = 5;
                  _iterator = _getIterator(lists);

                case 7:
                  if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                    context$3$0.next = 14;
                    break;
                  }

                  list = _step.value;
                  context$3$0.next = 11;
                  return _regeneratorRuntime.awrap(badProxyAvoidanceList(list));

                case 11:
                  _iteratorNormalCompletion = true;
                  context$3$0.next = 7;
                  break;

                case 14:
                  context$3$0.next = 20;
                  break;

                case 16:
                  context$3$0.prev = 16;
                  context$3$0.t0 = context$3$0['catch'](5);
                  _didIteratorError = true;
                  _iteratorError = context$3$0.t0;

                case 20:
                  context$3$0.prev = 20;
                  context$3$0.prev = 21;

                  if (!_iteratorNormalCompletion && _iterator['return']) {
                    _iterator['return']();
                  }

                case 23:
                  context$3$0.prev = 23;

                  if (!_didIteratorError) {
                    context$3$0.next = 26;
                    break;
                  }

                  throw _iteratorError;

                case 26:
                  return context$3$0.finish(23);

                case 27:
                  return context$3$0.finish(20);

                case 28:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this, [[5, 16, 20, 28], [21,, 23, 27]]);
          });

          it('should avoid proxying non-session commands even if not in the list', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver.getProxyAvoidList = function () {
                    return [['POST', new RegExp('')]];
                  };

                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/status',
                    method: 'GET',
                    json: true,
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 3:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(200);
                  res.body.should.eql({
                    status: 0,
                    value: "I'm fine",
                    sessionId: null
                  });

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

          it('should avoid proxying deleteSession commands', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver.getProxyAvoidList = function () {
                    return [['POST', new RegExp('')]];
                  };

                  driver.sessionId.should.equal(sessionId);
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId,
                    method: 'DELETE',
                    json: true,
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 4:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(200);
                  should.not.exist(driver.sessionId);
                  driver.jwpProxyActive.should.be['false'];

                case 8:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });
        });

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, _this5);
});

// make sure adding the optional 'id' doesn't clobber a route where we
// have an actual required 'id'

// Delete the session
//# sourceMappingURL=data:application/json;charset=utf8;base64,
